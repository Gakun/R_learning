install.packages("swirl")
search()
library('swirl')
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
play()
c(TRUE, TRUE, FALSE) && c(TRUE, TRUE, TRUE)
nxt()
TRUE | c(TRUE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 5)
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
play()
length()
nxt()
submit()
play()
my_mean <- function(my_vector) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
sum(my_vector) / length(my_vector)
}
my_mean(c(1,2,3))
nxt()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
??standard dviation
?starndard
??deviation
evaluate(st, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(124)
submit()
mad_libs(place = 'A', adjective = 'B', noun = 'C')
submit()
'I' %p% 'love' %p% 'R!'
d1 <= Sys.Date()
d1 <- Sys.Date()
class(d1)
d1
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
?unclass
weekdays(d1)
months(t1)
quarters(t1)
quarters(t2)
ts <- "October 17, 1986 08:24"
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 < -strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
sys.time() > t1
Sys.time() > t1
Sys.time() - t1
dfftime(Sys.time(), t1, units = 'days')
difftime(Sys.time(), t1, units = 'days')
x <- 1:10
if(x > 5) {
x <- 0
}
?if
??if
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
?tapply
?ave
a <- c(1,2,3,4)
sum(a)
ave(a, Fun=sum)
?ave
ave(1:3)
?arrange
library(dplyr)
install.packages("dplyr")
library(dplyr)
?match
library(dataset)
library(datasets)
search()
?datasets
head(pollute)
library(help = "datasets")
head(airquality)
match("Ozone", names(airquality))
!
1*T
1*F
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country %in% "India")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
select(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarise(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_counts_sorted)
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into = c("sex", "class"))
submit()
students3
?gather
submit()
?spread
submit()
play()
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
spread(stocksm, stock, price)
nxt()
submit()
play()
stocks
stocks <- data.frame(
+     time = as.Date('2009-01-01') + 0:9,
+     X = rnorm(10, 0, 1),
+     Y = rnorm(10, 0, 2),
+     Z = rnorm(10, 0, 4)
+ )
> stocksm <- stocks %>% gather(stock, price, -time)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
spread(stocksm, time, stocks)
spread(stocksm, time, stock)
students3
students3 %>% gather(class, grade, class1:class5)
students3 %>% gather(class, grade, class1:class5, na.rm = TRUE)
students3 %>% gather(class, grade, class1:class5, na.rm = TRUE) %>% spread(test,class)
nxt()
library(readr)
parse_number("class5")
submit()
submit()
play()
students3 %>% gather(class, grade, class1:class5, na.rm = TRUE) %>% spread(test,class)
students3 %>% gather(class, grade, class1:class5, na.rm = TRUE) %>% spread(test, grade)
students3 %>% gather(class, grade, class1:class5, na.rm = TRUE) %>% spread(test, grade) %>% mutate(class = parse_number(class))
?parse_number
nxt()
submit()
info()
skip()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
setwd("Desktop/R_learning/getting_cleaning_data/week3")
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "data.csv", method = "curl")
?which
import(data.table)
library(data.table)
df <- fread("data.csv")
str(df)
which(c(NA, True, FALSE))
which(c(NA, TRUE, FALSE))
agricultureLogical <- df$ACR == 3 & df$AGS == 6
which(agricultureLogical)
agricultureLogical
library(jpeg)
install.packages("jpeg")
library(jpeg)
?jpeg
pic <- jpeg("instructor.jpeg", native=TRUE)
pic <- readJPEG("instructor.jpeg", native=TRUE)
quantile(pic, c(0.3, 0.8))
?read.table
product <- read.csv(url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"))
education <- read.csv(url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"))
head(product)
head(education)
?match
str(product)
df <- merge(product, education, by.x = "X", by.y = "CountryCode")
str(df)
?merge
df <- merge(product, education, by.x = "X", by.y = "CountryCode", all = FALSE)
df$X
unique(df$X)
product$X
education$CountryCode
df <- merge(education, product, by.x = "CountryCode", by.y = "X", all = FALSE)
df
summary(df$CountryCode)
df$CountryCode
"" %in% df$CountryCode
"" %in% product$X
product$X
unique(df$CountryCode)
df <- merge(product, education, by.x = "X", by.y = "CountryCode", all = FALSE)
unique(df$X)
nrow(df)
length(df$X)
df <- merge(education, product, by.x = "CountryCode", by.y = "X", all = FALSE)
nrow(df)
match(education$CountryCode, product$X)
length(match(education$CountryCode, product$X))
product$Gross.domestic.product.2012
?read.csv
product <- product[match(education$CountryCode, product$X),]
product
?match
match(education$CountryCode, product$X)
a <- na.omit(match(education$CountryCode, product$X))
length(a)
df <- merge(education, product, by.x = "CountryCode", by.y = "X")
nrow(df)
df <- merge(product, education, by.x = "X", by.y = "CountryCode")
nrow(df)
library(dplyr)
?dplyr
df
str(df)
df$Gross.domestic.product.2012
arrange(df, desc(Gross.domestic.product.2012))
product
na.omit(product)
product <- read.csv("product.csv", header = FALSE, skip = 5, nrows = 236)
product
product <- select(product, V1, V2, V4, V5)
product
prodcut <- read.csv("product.csv", header = FALSE, skip = 5, nrows = 190)
head(product)
product <- read.csv("product.csv", header = FALSE, skip = 5, nrows = 190)
head(product)
product <- product %>% select(V1, V2, V4, V5) %>% mutate(countryCode = V1, rank = V2, country = V4, GDP = V5)
head(product)
product <- read.csv("product.csv", header = FALSE, skip = 5, nrows = 190
)
product <- product %>% select(V1, V2, V4, V5) %>% rename(countryCode = V1, rank = V2, country = V4, GDP = V5)
head(product)
tail(product)
merge(product, education, by.x = "countryCode", by.y = "CountryCode", all = FALSE)
df <- merge(product, education, by.x = "countryCode", by.y = "CountryCode", all = FALSE)
match(product$countryCode, education$CountryCode)
length(match(product$countryCode, education$CountryCode))
arrange(df, desc(rank))
unique(df$Income.Group)
group_by(df, Income.Group)
df
df %>% group_by(Income.Group) %>% summarize(average_rank = mean(rank))
?quantile
quantile(df$rank)
quantile(df$rank, c(0.2, 0.4, 0.6, 0.8))
df <- mutate(df, quant = findInterval(rank, quantile(rank, c(0.2, 0.4, 0.6, 0.8))))
df
unique(df$quant)
table(df$Income.Group, df$quant)
